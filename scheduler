<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Radio Scheduler</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- html2canvas for screenshots -->
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <style>
        /* Custom styles for Inter font and general body styling */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Align to start to allow scrolling if content is long */
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }
        /* Ensure inputs and buttons have consistent styling */
        input[type="text"], input[type="number"], input[type="date"], select, button {
            border-radius: 0.5rem; /* Rounded corners */
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db; /* Light gray border */
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); /* Subtle shadow */
        }
        button {
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
        }
        button:hover {
            transform: translateY(-1px);
        }
        button:active {
            transform: translateY(0);
        }
        /* Table styling for better readability */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            border-radius: 0.5rem;
            overflow: hidden; /* Ensures rounded corners apply to table content */
        }
        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e5e7eb; /* Lighter gray border for rows */
        }
        th {
            background-color: #1f2937; /* Darker header background */
            color: #ffffff; /* White text for header */
            font-weight: 600;
        }
        tr:nth-child(even) {
            background-color: #f9fafb; /* Slightly different background for even rows */
        }
        /* Highlight colors based on type */
        .type-song {
            background-color: #dcfce7; /* Light green */
        }
        .type-talk {
            background-color: #e0f2fe; /* Light blue */
        }
        .type-intro {
            background-color: #fef9c3; /* Light yellow */
        }
        tr.total-row {
            background-color: #e0f2fe; /* Light blue for total rows */
            font-weight: bold;
            color: #1e40af; /* Darker blue text */
        }
        tr.total-row td {
            border-top: 2px solid #93c5fd; /* Stronger border above total */
        }
        tr:last-child td {
            border-bottom: none; /* No border for the last row */
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            display: none; /* Hidden by default */
            text-align: center;
        }
        .message-box button {
            margin-top: 15px;
            background-color: #4f46e5;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.5rem;
            z-index: 1001;
            display: none; /* Hidden by default */
        }
        .saved-schedule-item {
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 1rem;
            background-color: #ffffff;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        }
        .saved-schedule-item img {
            max-width: 100%;
            height: auto;
            border-radius: 0.25rem;
            margin-top: 0.5rem;
            border: 1px solid #d1d5db;
        }
    </style>
</head>
<body class="antialiased">
    <div class="container mx-auto p-6 bg-white shadow-xl rounded-lg max-w-4xl w-full" id="schedulerContainer">
        <h1 class="text-4xl font-extrabold text-gray-900 mb-4 text-center">Radio Scheduler</h1>

        <!-- Date Input for the Schedule -->
        <div class="mb-6 flex justify-center items-center gap-2">
            <label for="scheduleDate" class="text-lg font-medium text-gray-700">Schedule Date:</label>
            <input type="date" id="scheduleDate" class="p-2 rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <!-- Input Form -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
            <input type="text" id="artistNameInput" placeholder="Artist" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
            <input type="text" id="songNameInput" placeholder="Song Name" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
            <input type="text" id="notesInput" placeholder="Notes" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
            <input type="number" id="minutes" placeholder="Min" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
            <input type="number" id="seconds" placeholder="Sec" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
            <!-- Hour Selector -->
            <select id="targetHour" class="col-span-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-md sm:text-sm border-gray-300">
                <option value="1">Hour 1</option>
                <option value="2">Hour 2</option>
            </select>
            <button id="addEntryBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 col-span-full md:col-span-1">Update Entry</button>
            <button id="cancelEditBtn" class="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 col-span-full md:col-span-1 hidden">Cancel Edit</button>
        </div>

        <!-- New Type Buttons -->
        <div class="flex flex-wrap justify-center gap-4 mb-8">
            <button id="addTalkTypeBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105">Add Talk</button>
            <button id="addIntroTypeBtn" class="bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105">Add Intro</button>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-wrap justify-center gap-4 mb-8">
            <button id="downloadScreenshotBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105">Download</button>
        </div>

        <!-- Container for content to be included in screenshot -->
        <div id="screenshotContent">
            <h2 id="screenshotDateDisplay" class="text-2xl font-bold text-gray-800 mb-4 text-center"></h2>
            <!-- Hour 1 Schedule -->
            <div class="mb-8 p-4 bg-gray-50 rounded-lg shadow-sm">
                <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Hour 1 Schedule</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Type</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Artist</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Song Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Notes</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Length</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="hour1SongList" class="bg-white divide-y divide-gray-200">
                            <!-- Entries for Hour 1 will be dynamically added here -->
                        </tbody>
                    </table>
                </div>
                <div class="text-right text-xl font-semibold text-gray-700 mt-4">
                    Total for Hour 1: <span id="totalDurationHour1">00h 00m 00s</span>
                </div>
            </div>

            <!-- Hour 2 Schedule -->
            <div class="mb-8 p-4 bg-gray-50 rounded-lg shadow-sm">
                <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Hour 2 Schedule</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Type</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Artist</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Song Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Notes</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Length</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="hour2SongList" class="bg-white divide-y divide-gray-200">
                            <!-- Entries for Hour 2 will be dynamically added here -->
                        </tbody>
                    </table>
                </div>
                <div class="text-right text-xl font-semibold text-gray-700 mt-4">
                    Total for Hour 2: <span id="totalDurationHour2">00h 00m 00s</span>
                </div>
            </div>

            <!-- Overall Total Duration Display -->
            <div class="text-right text-2xl font-bold text-gray-800 mt-8 p-4 bg-gray-100 rounded-lg shadow-inner">
                Overall Total Duration: <span id="overallTotalDuration">00h 00m 00s</span>
            </div>
        </div>
    </div>

    <!-- Message Box for alerts -->
    <div id="messageBox" class="message-box">
        <p id="messageText"></p>
        <button onclick="document.getElementById('messageBox').style.display='none'">OK</button>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
        <p>Processing...</p>
    </div>

    <script type="module">
        // Firebase imports (still included for potential future use, but not actively used for save/load)
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, deleteDoc, doc, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global Firebase variables
        let firebaseApp = null;
        let db = null;
        let auth = null;
        let userId = null;
        let firebaseInitialized = false;

        // Array to store song objects
        let songs = [];
        let editingIndex = null; // To keep track of the song being edited
        let currentEntryType = 'song'; // Default entry type

        // Get references to DOM elements
        const schedulerContainer = document.getElementById('schedulerContainer');
        const scheduleDateInput = document.getElementById('scheduleDate');
        const artistNameInput = document.getElementById('artistNameInput');
        const songNameInput = document.getElementById('songNameInput');
        const notesInput = document.getElementById('notesInput'); // New notes input
        const minutesInput = document.getElementById('minutes');
        const secondsInput = document.getElementById('seconds');
        const targetHourSelect = document.getElementById('targetHour');
        const addEntryBtn = document.getElementById('addEntryBtn');
        const cancelEditBtn = document.getElementById('cancelEditBtn');
        const hour1SongListBody = document.getElementById('hour1SongList');
        const hour2SongListBody = document.getElementById('hour2SongList');
        const totalDurationHour1Span = document.getElementById('totalDurationHour1');
        const totalDurationHour2Span = document.getElementById('totalDurationHour2');
        const overallTotalDurationSpan = document.getElementById('overallTotalDuration');
        const messageBox = document.getElementById('messageBox');
        const messageText = document.getElementById('messageText');
        const loadingOverlay = document.getElementById('loadingOverlay');

        const downloadScreenshotBtn = document.getElementById('downloadScreenshotBtn');
        const screenshotContent = document.getElementById('screenshotContent'); // New screenshot target
        const screenshotDateDisplay = document.getElementById('screenshotDateDisplay'); // New element to display date in screenshot

        // New type buttons
        const addTalkTypeBtn = document.getElementById('addTalkTypeBtn');
        const addIntroTypeBtn = document.getElementById('addIntroTypeBtn');

        /**
         * Displays a custom message box instead of alert().
         * @param {string} message - The message to display.
         */
        window.showMessageBox = function(message) {
            messageText.textContent = message;
            messageBox.style.display = 'block';
        }

        /**
         * Shows or hides the loading overlay.
         * @param {boolean} show - True to show, false to hide.
         */
        function showLoading(show) {
            loadingOverlay.style.display = show ? 'flex' : 'none';
        }

        /**
         * Converts total seconds into a human-readable H:M:S format.
         * @param {number} totalSeconds - The total duration in seconds.
         * @returns {string} Formatted string (e.g., "01h 05m 30s").
         */
        function formatDuration(totalSeconds) {
            const hours = Math.floor(totalSeconds / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;

            const pad = (num) => num.toString().padStart(2, '0');

            return `${pad(hours)}h ${pad(minutes)}m ${pad(seconds)}s`;
        }

        /**
         * Calculates the total duration of all songs in the `songs` array
         * and updates the overall display, as well as individual hour totals.
         */
        function updateAllDurations() {
            let totalSecondsOverall = 0;
            let totalSecondsHour1 = 0;
            let totalSecondsHour2 = 0;

            songs.forEach(song => {
                totalSecondsOverall += song.lengthInSeconds;
                if (song.targetHour == 1) {
                    totalSecondsHour1 += song.lengthInSeconds;
                } else if (song.targetHour == 2) {
                    totalSecondsHour2 += song.lengthInSeconds;
                }
            });

            overallTotalDurationSpan.textContent = formatDuration(totalSecondsOverall);
            totalDurationHour1Span.textContent = formatDuration(totalSecondsHour1);
            totalDurationHour2Span.textContent = formatDuration(totalSecondsHour2);
        }

        /**
         * Renders the songs into two separate hourly tables based on their targetHour.
         */
        function renderSchedules() {
            hour1SongListBody.innerHTML = ''; // Clear existing list for Hour 1
            hour2SongListBody.innerHTML = ''; // Clear existing list for Hour 2

            const hour1Songs = songs.filter(song => song.targetHour == 1);
            const hour2Songs = songs.filter(song => song.targetHour == 2);

            // Helper to render a list of songs into a tbody
            const renderSongsIntoTable = (songArray, tbodyElement) => {
                if (songArray.length === 0) {
                    const noSongsRow = document.createElement('tr');
                    noSongsRow.innerHTML = `<td colspan="6" class="text-center py-4 text-gray-500 italic">No entries added yet.</td>`;
                    tbodyElement.appendChild(noSongsRow);
                } else {
                    songArray.forEach((song) => {
                        const originalIndex = songs.indexOf(song); // Get original index for edit/remove
                        const row = document.createElement('tr');
                        // Add class based on entry type for styling
                        row.className = `hover:bg-gray-50 type-${song.type}`;
                        row.innerHTML = `
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 capitalize">${song.type}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${song.artistName}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${song.songName}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${song.notes || ''}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${formatDuration(song.lengthInSeconds)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button onclick="editSong(${originalIndex})" class="text-blue-600 hover:text-blue-900 bg-blue-100 hover:bg-blue-200 px-3 py-1 rounded-full transition duration-150 ease-in-out mr-2">Edit</button>
                                <button onclick="removeSong(${originalIndex})" class="text-red-600 hover:text-red-900 bg-red-100 hover:bg-red-200 px-3 py-1 rounded-full transition duration-150 ease-in-out">Remove</button>
                            </td>
                        `;
                        tbodyElement.appendChild(row);
                    });
                }
            };

            renderSongsIntoTable(hour1Songs, hour1SongListBody);
            renderSongsIntoTable(hour2Songs, hour2SongListBody);

            updateAllDurations(); // Update all duration displays
        }

        /**
         * Sets up the form for editing a song.
         * @param {number} index - The index of the song to edit.
         */
        window.editSong = function(index) {
            const songToEdit = songs[index];
            artistNameInput.value = songToEdit.artistName;
            songNameInput.value = songToEdit.songName;
            notesInput.value = songToEdit.notes || ''; // Populate notes field
            minutesInput.value = Math.floor(songToEdit.lengthInSeconds / 60);
            secondsInput.value = songToEdit.lengthInSeconds % 60;
            currentEntryType = songToEdit.type; // Set the current entry type for editing
            targetHourSelect.value = songToEdit.targetHour;

            editingIndex = index; // Store the index of the song being edited
            addEntryBtn.textContent = 'Update Entry'; // Change button text
            addEntryBtn.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
            addEntryBtn.classList.add('bg-green-600', 'hover:bg-green-700'); // Change button color for update
            cancelEditBtn.classList.remove('hidden'); // Show cancel button
            artistNameInput.focus();
        }

        /**
         * Resets the form to "Add Entry" mode.
         */
        function resetForm() {
            artistNameInput.value = '';
            songNameInput.value = '';
            notesInput.value = ''; // Clear notes field
            minutesInput.value = '';
            secondsInput.value = '';
            currentEntryType = 'song'; // Reset default type to 'song'
            targetHourSelect.value = '1'; // Reset hour selector to Hour 1
            editingIndex = null; // Clear editing index
            addEntryBtn.textContent = 'Add Entry'; // Reset button text
            addEntryBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
            addEntryBtn.classList.add('bg-indigo-600', 'hover:bg-indigo-700'); // Reset button color
            cancelEditBtn.classList.add('hidden'); // Hide cancel button
        }

        /**
         * Handles adding a new entry or updating an existing one.
         * This function is now called by the individual type buttons or the generic "Add Entry" button.
         * @param {string} type - The type of entry (song, talk, intro).
         */
        function handleAddOrUpdateEntry(type) {
            const artistName = artistNameInput.value.trim();
            const songName = songNameInput.value.trim();
            const notes = notesInput.value.trim(); // Get notes value
            const minutes = parseInt(minutesInput.value);
            const seconds = parseInt(secondsInput.value);
            const targetHour = parseInt(targetHourSelect.value);

            // Input validation: Only require duration to be valid
            if (isNaN(minutes) || isNaN(seconds) || minutes < 0 || seconds < 0 || seconds >= 60) {
                showMessageBox('Please enter valid non-negative numbers for minutes and seconds (seconds must be less than 60).');
                return;
            }
            // Allow 0 minutes and 0 seconds for intro type
            if (minutes === 0 && seconds === 0 && type !== 'intro') {
                showMessageBox('Entry length cannot be zero.');
                return;
            }

            const lengthInSeconds = (minutes * 60) + seconds;

            if (editingIndex !== null) {
                // Update existing entry
                songs[editingIndex].artistName = artistName;
                songs[editingIndex].songName = songName;
                songs[editingIndex].notes = notes; // Update notes
                songs[editingIndex].lengthInSeconds = lengthInSeconds;
                songs[editingIndex].type = type;
                songs[editingIndex].targetHour = targetHour;
            } else {
                // Add new entry
                const newEntry = {
                    artistName: artistName,
                    songName: songName,
                    notes: notes, // Add notes to new entry
                    lengthInSeconds: lengthInSeconds,
                    type: type,
                    targetHour: targetHour
                };
                songs.push(newEntry);
            }

            renderSchedules();
            resetForm();
            artistNameInput.focus();
        }

        // Event listener for the main "Update Entry" button (only used for updates now)
        addEntryBtn.addEventListener('click', () => handleAddOrUpdateEntry(currentEntryType));

        // Event listeners for the new type buttons
        addTalkTypeBtn.addEventListener('click', () => {
            // Pre-fill values for "Add Talk"
            artistNameInput.value = 'Talk';
            songNameInput.value = 'Rhian';
            notesInput.value = ''; // Clear notes for prefill
            minutesInput.value = '2';
            secondsInput.value = '0';
            handleAddOrUpdateEntry('talk');
        });
        addIntroTypeBtn.addEventListener('click', () => {
            // Pre-fill values for "Add Intro"
            artistNameInput.value = 'Intro';
            songNameInput.value = 'Rhian';
            notesInput.value = ''; // Clear notes for prefill
            minutesInput.value = '0';
            secondsInput.value = '10';
            handleAddOrUpdateEntry('intro');
        });


        /**
         * Event listener for the Cancel Edit button.
         */
        cancelEditBtn.addEventListener('click', () => {
            resetForm();
            artistNameInput.focus();
        });

        /**
         * Removes a song from the list based on its index.
         * @param {number} index - The index of the song to remove.
         */
        window.removeSong = function(index) {
            if (index > -1 && index < songs.length) {
                songs.splice(index, 1); // Remove 1 element at the given index
                renderSchedules(); // Re-render the schedules
                // If the song being removed was the one being edited, reset the form
                if (editingIndex === index) {
                    resetForm();
                } else if (editingIndex > index) {
                    // Adjust editingIndex if a song before it was removed
                    editingIndex--;
                }
            }
        }

        /**
         * Takes a screenshot of the main scheduler content.
         * @returns {Promise<string>} A promise that resolves with the data URL of the screenshot.
         */
        async function takeScreenshotAndProcess() {
            showLoading(true);
            try {
                // Update the date display in the screenshot content
                const selectedDate = scheduleDateInput.value;
                if (selectedDate) {
                    const dateObj = new Date(selectedDate);
                    // Format date as "Day, Month DD, YYYY" e.g., "Monday, July 21, 2025"
                    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                    screenshotDateDisplay.textContent = `Schedule for: ${dateObj.toLocaleDateString('en-US', options)}`;
                } else {
                    screenshotDateDisplay.textContent = 'Schedule Date: Not Set';
                }


                await new Promise(resolve => setTimeout(resolve, 100)); // Small delay for rendering

                // Capture the new screenshotContent div
                const canvas = await html2canvas(screenshotContent, {
                    scale: 2, // Increase scale for better quality
                    useCORS: true, // Required if images are from different origins
                    logging: false // Disable logging for cleaner console
                });
                return canvas.toDataURL('image/png');
            } catch (error) {
                console.error("Error taking screenshot:", error);
                showMessageBox("Failed to capture screenshot.");
                return null;
            } finally {
                showLoading(false);
            }
        }

        /**
         * Downloads the current schedule as a PNG image.
         */
        downloadScreenshotBtn.addEventListener('click', async () => {
            const imageDataUrl = await takeScreenshotAndProcess();
            if (imageDataUrl) {
                const a = document.createElement('a');
                a.href = imageDataUrl;
                a.download = 'radio_schedule_' + (scheduleDateInput.value || new Date().toISOString().slice(0, 10)) + '.png';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                showMessageBox("Schedule downloaded successfully!");
            }
        });

        // Firebase initialization is still present for completeness, but save/load schedule functionality is removed.
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

                if (Object.keys(firebaseConfig).length === 0) {
                    console.warn("Firebase config not found. Firebase features (if any were enabled) will not work.");
                    return;
                }

                firebaseApp = initializeApp(firebaseConfig);
                db = getFirestore(firebaseApp);
                auth = getAuth(firebaseApp);

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        console.log("Firebase authenticated. User ID:", userId);
                        firebaseInitialized = true;
                    } else {
                        if (initialAuthToken) {
                            try {
                                await signInWithCustomToken(auth, initialAuthToken);
                                console.log("Signed in with custom token.");
                            } catch (error) {
                                console.error("Error authenticating. Some features may not work.");
                                await signInAnonymously(auth);
                                userId = auth.currentUser?.uid || crypto.randomUUID();
                                console.log("Signed in anonymously. User ID:", userId);
                                firebaseInitialized = true;
                            }
                        } else {
                            await signInAnonymously(auth);
                            userId = auth.currentUser?.uid || crypto.randomUUID();
                            console.log("Signed in anonymously. User ID:", userId);
                            firebaseInitialized = true;
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing Firebase:", error);
                showMessageBox("Error initializing Firebase. Please check console for details.");
            }
        });

        // Initial render of the schedule tables
        document.addEventListener('DOMContentLoaded', renderSchedules);
    </script>
</body>
</html>

